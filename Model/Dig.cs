/* 
 * HighLoad Cup 2021
 *
 * ## Usage ## List of all custom errors First number is HTTP Status code, second is value of \"code\" field in returned JSON object, text description may or may not match \"message\" field in returned JSON object. - 422.1000: wrong coordinates - 422.1001: wrong depth - 409.1002: no more active licenses allowed - 409.1003: treasure is not digged 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = goldrunnersharp.Client.SwaggerDateConverter;

namespace goldrunnersharp.Model
{
    /// <summary>
    /// Dig
    /// </summary>
    [DataContract]
    public partial class Dig :  IEquatable<Dig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Dig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Dig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dig" /> class.
        /// </summary>
        /// <param name="licenseID">ID of the license this request is attached to. (required).</param>
        /// <param name="posX">posX (required).</param>
        /// <param name="posY">posY (required).</param>
        /// <param name="depth">depth (required).</param>
        public Dig(int? licenseID = default(int?), int? posX = default(int?), int? posY = default(int?), int? depth = default(int?))
        {
            this.LicenseID = licenseID;
         
            this.PosX = posX;
         
            this.PosY = posY;
         
            this.Depth = depth;
        }
        
        /// <summary>
        /// ID of the license this request is attached to.
        /// </summary>
        /// <value>ID of the license this request is attached to.</value>
        [DataMember(Name="licenseID", EmitDefaultValue=false)]
        public int? LicenseID { get; set; }

        /// <summary>
        /// Gets or Sets PosX
        /// </summary>
        [DataMember(Name="posX", EmitDefaultValue=false)]
        public int? PosX { get; set; }

        /// <summary>
        /// Gets or Sets PosY
        /// </summary>
        [DataMember(Name="posY", EmitDefaultValue=false)]
        public int? PosY { get; set; }

        /// <summary>
        /// Gets or Sets Depth
        /// </summary>
        [DataMember(Name="depth", EmitDefaultValue=false)]
        public int? Depth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dig {\n");
            sb.Append("  LicenseID: ").Append(LicenseID).Append("\n");
            sb.Append("  PosX: ").Append(PosX).Append("\n");
            sb.Append("  PosY: ").Append(PosY).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dig);
        }

        /// <summary>
        /// Returns true if Dig instances are equal
        /// </summary>
        /// <param name="input">Instance of Dig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LicenseID == input.LicenseID ||
                    (this.LicenseID != null &&
                    this.LicenseID.Equals(input.LicenseID))
                ) && 
                (
                    this.PosX == input.PosX ||
                    (this.PosX != null &&
                    this.PosX.Equals(input.PosX))
                ) && 
                (
                    this.PosY == input.PosY ||
                    (this.PosY != null &&
                    this.PosY.Equals(input.PosY))
                ) && 
                (
                    this.Depth == input.Depth ||
                    (this.Depth != null &&
                    this.Depth.Equals(input.Depth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LicenseID != null)
                    hashCode = hashCode * 59 + this.LicenseID.GetHashCode();
                if (this.PosX != null)
                    hashCode = hashCode * 59 + this.PosX.GetHashCode();
                if (this.PosY != null)
                    hashCode = hashCode * 59 + this.PosY.GetHashCode();
                if (this.Depth != null)
                    hashCode = hashCode * 59 + this.Depth.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PosX (int?) minimum
            if(this.PosX < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PosX, must be a value greater than or equal to 0.", new [] { "PosX" });
            }

            // PosY (int?) minimum
            if(this.PosY < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PosY, must be a value greater than or equal to 0.", new [] { "PosY" });
            }

            // Depth (int?) maximum
            if(this.Depth > (int?)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Depth, must be a value less than or equal to 100.", new [] { "Depth" });
            }

            // Depth (int?) minimum
            if(this.Depth < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Depth, must be a value greater than or equal to 1.", new [] { "Depth" });
            }

            yield break;
        }
    }

}
